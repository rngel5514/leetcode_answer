class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        """
        Given a collection of numbers that might contain duplicates, return all possible unique permutations.
        """
        results = []
        results_filter = []
        def genDict(gen_result,nums_tmp,results):
            if nums_tmp == []:
                results.append(gen_result)
                return 
            for tmp in nums_tmp:
                pass_result = gen_result.copy()
                pass_result.append(tmp)
                tmp_reverse = False
                pass_nums = []
                for gen_tmp in nums_tmp:
                    if gen_tmp == tmp and tmp_reverse == False:
                        tmp_reverse = True
                        continue
                    else:
                        pass_nums.append(gen_tmp)
                genDict(pass_result,pass_nums,results)
        genDict([],nums,results)
        for tmp in results:
            if not tmp in results_filter:
                results_filter.append(tmp)
        return results_filter
