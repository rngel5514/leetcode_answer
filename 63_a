"""
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to 

reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?


"""

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if len(obstacleGrid)<= 1 :
            if len(obstacleGrid) == 1:
                for tmp in obstacleGrid[0]:
                    if tmp != 0:
                        return 0
                return 1
            return 0
        if obstacleGrid[0][0] == 1:
            return 0
        rev_tmp = True
        for i in range(len(obstacleGrid[0])):
            if obstacleGrid[0][i] == 0 and rev_tmp == True:
                obstacleGrid[0][i] = 1
            elif obstacleGrid[0][i] == 1:
                obstacleGrid[0][i] = 0
                rev_tmp = False
     
        rev_tmp = True
        for i in range(1,len(obstacleGrid)):
            if obstacleGrid[i][0] == 0 and rev_tmp == True:
                obstacleGrid[i][0] = 1
            elif obstacleGrid[i][0] == 1:
                obstacleGrid[i][0] = 0
                rev_tmp =False
        for i in  range(1,len(obstacleGrid[0])):
            for j in range(1,len(obstacleGrid)):
                if obstacleGrid[j][i] == 1:
                    obstacleGrid[j][i] = 0
                else:
                    obstacleGrid[j][i] = obstacleGrid[j-1][i] + obstacleGrid[j][i-1]
        return obstacleGrid[-1][-1]
                
        
