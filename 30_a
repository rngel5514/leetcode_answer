#超时1
class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        """
        You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.
        """
        results = []
        def parm(lt,rts,n,results):    
            if(n <= 0):
                results.append(rts)
            n -= 1
            for i in range(len(lt)):
                rt = rts.copy()
                rt.append(lt[i])
                tmp = lt.copy()
                del(tmp[i])
                #words[i] 和tmp组合
                parm(tmp.copy(),rt.copy(),n,results)
        parm(words,results.copy(),len(words),results)
        result = []
        for str_tmp in results:
            str_tmp = ''.join(str_tmp)
            tmp = 0
            while(tmp<len(s)-1 or tmp != -1):
                tmp = s.find(str_tmp,tmp)
                if tmp != -1:
                    result.append(tmp)
                    tmp += 1
        return set(result)







#超时2
class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        """
        You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.
        """
        
        data = dict()
        if len(words) == 0 or s == '' :
            return []
        word_len = len(words[0])
        if(word_len*len(words) > len(s)):
            return []
        for word in words:
            if data.get(word) == None:
                data[word] = 1
            else:
          #      print(data)
                data[word] += 1
        results = []
        lp = 0
        l_s = word_len*len(words)
        rp = l_s
        def checkStr(tmp_s,words,word_l,check):
            i = 0
            def_re = dict()
            while(i <= len(tmp_s)-word_l):
                tmp = tmp_s[i:i+word_l]
               # print(tmp)
                if tmp in words:
                    if def_re.get(tmp) == None:
                        def_re[tmp] = 1
                    else:
                        def_re[tmp] += 1
                i += word_l
            if check == def_re:
                return True
            else:
                return False
        
            """
            查看是否满足要求
            """
        while(lp <= len(s)-l_s):
            if checkStr(s[lp:rp],words,word_len,data):
                results.append(lp)
            lp += 1
            rp += 1
        return results
