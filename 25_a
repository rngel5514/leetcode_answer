class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        """
        Given a linked list, reverse the nodes of a
        linked list k at a time and return its modified list.

        k is a positive integer and is less than or
        equal to the length of the linked list. If 
        the number of nodes is not a multiple of k 
        then left-out nodes in the end should remain 
        as it is.
        """
        poi = head
        pre_node = None
        current = head
        i = 0
        sum = 0
        q = head
        while(q!=None):
            q=q.next
            sum = sum+1
        if(sum <k):
            return head
        def reverseList(pre_node,current,result,seq):
            next_ptr = None
            while(seq>0):
                seq = seq - 1
                next_ptr = current.next
                current.next = result
                result = current
                current = next_ptr
            if(pre_node!=None):
                pre_node.next = result
            return result
        while(poi != None):
            i = i+1
            print(i)
            poi = poi.next
            if( i == k-1):
                head = poi 
            if(i%k == 0):
                current = reverseList(pre_node,current,poi,k)
                for j in range(k):
                    tmp = current
                    current=current.next
                poi = current
                pre_node = tmp    
        
        return head
        
