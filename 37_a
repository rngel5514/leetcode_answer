class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Write a program to solve a Sudoku puzzle by filling the empty cells.
        A sudoku solution must satisfy all of the following rules:
        Each of the digits 1-9 must occur exactly once in each row.
        Each of the digits 1-9 must occur exactly once in each column.
        Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
        Empty cells are indicated by the character '.'.
        """
        """
        Do not return anything, modify board in-place instead.
        """
        #recurse
        column_dicts = []
        row_dicts = []
        nin_dicts = []
        list_que = []
        stack_result = []
        for i in range(len(board)):
            row_dicts.append(dict())
            column_dicts.append(dict())
        for i in range(int((len(board)*len(board[0]))/9)):
            nin_dicts.append(dict())
        for i in range(len(board)):
            for j in range(len(board[i])):
                if board[i][j] == '.':
                    list_que.append((i,j))
                    continue
                if row_dicts[i].get(board[i][j])!=None or column_dicts[j].get(board[i][j]) != None or nin_dicts[(int(i/3)-1)*3+int(j/3)-1].get(board[i][j]) != None:
                    return False
                else:
                    row_dicts[i][board[i][j]] = 1
                    column_dicts[j][board[i][j]] = 1
                    nin_dicts[(int(i/3)-1)*3+int(j/3)-1][board[i][j]] = 1
        def recurseSoveSudu(seq):
            if seq >= len(list_que):
                return True
            tmp = list_que[seq]
            add_true = False
            for i in range(1,10):
                i = str(i)
                if(row_dicts[tmp[0]].get(i) == None and column_dicts[tmp[1]].get(i) == None and nin_dicts[(int(tmp[0]/3)-1)*3+int(tmp[1]/3)-1].get(i)== None):
                    #字典对应位置添加
                    row_dicts[tmp[0]][i] = 1
                    column_dicts[tmp[1]][i] = 1
                    nin_dicts[(int(tmp[0]/3)-1)*3+int(tmp[1]/3)-1][i] = 1
                    if (recurseSoveSudu(seq+1)):
                        board[tmp[0]][tmp[1]] = (i)
                        return True
                    else:
                        del row_dicts[tmp[0]][i]
                        del column_dicts[tmp[1]][i]
                        del nin_dicts[(int(tmp[0]/3)-1)*3+int(tmp[1]/3)-1][i]
            if(add_true == False):
                return False
        recurseSoveSudu(0)
