#17. Letter Combinations of a Phone Number Medium
"""
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
"""
class Solution(object):
    def letterCombinations(self, digits):
        if digits == "":
            return digits
        """
        :type digits: str
        :rtype: List[str]
        """
        num_to_a = { "2":['a','b','c'],
              "3":['d','e','f'],
              "4":['g','h','i'],
              "5":['j','k','l'],
              "6":['m','n','o'],
              "7":['p','q','r','s'],
              "8":['t','u','v'],
              "9":['w','x','y','z']}
        def combineOneToAll(tmp_a,tmp_b):
            results = []
            for tmp in tmp_b:
                results.append([tmp_a,tmp])
            return results
        def combine_one(tmp_a):
            results = []
            for i in range(len(tmp_a)-1):
                print(i)
                print(tmp_a[i+1:])
                results = results + (combineOneToAll(tmp_a[i],tmp_a[i+1:]))
                print(results)
            return results     
        def combine_two(tmp_a,tmp_b):
            results = []
            for tmp in tmp_a:
                results = results + combineOneToAll(tmp,tmp_b)
            return results
        def oneForAll(i,digits):
            tmps = []
            if(i == 0):
                return num_to_a[digits[0]]
            for j in num_to_a[digits[i]]:
                for tmp in oneForAll(i-1,digits):
                    tmps.append(tmp+j)
            return tmps
        tmp = oneForAll(len(digits)-1,digits)
        return tmp
